OptiPersLP - optimal cycles in persistence via linear programming.

* Tools needed *
1. A working C++ compiler that supports C++11.
2. GNU build system (autotools)
3. libtool
4. Python

* Dependencies *
1. CGAL
2. GLPK
3. BOOST
4. .. and their respective dependencies

* Build and compilation *
1a. If you cloned the project:
  * autoreconf --install
  * ./configure
  * make
  * make check

1b. If you downloaded the distribution package:
  (Not yet ready; coming soon!)
  * ./configure
  * make
  * make check

1c. For advanced configuration, see:
  * ./configure --help

2. (Optional) Installation:
  * make install
	
* Usage *
The main "program" is programs/optiperslp. This program computes
the optimal cycles in persistence of the weighted alpha shape of
the input point cloud.

Input file is in the format of:
x1 y1 z1 r1
x2 y2 z2 r2
	...
Corresponding to 3d coordinates and weights of the weighted point cloud.
Weights are to be given in linear units (NOT squared radius!).
Please ensure that your point cloud is not degenerate, and is actually 3d.

See programs/sample.txt for an example. This is the point cloud of the
8 vertices of a cube. centered at the origin with side length 4.

* Output Files *
1. Generators
  Each persistence generator is encoded by the following format:	
	; b d
	c1, v0, v1, ... vd
	c2, w0, w1, ... wd
	  ...

where b and d are the endpoints of the persistence interval
of this generator, and the following lines contain information about
the computed optimal cycle corresponding to it, and are to be read
in the following way.

A cycle is a linear combination of simplices. Each line represents a
term in this linear combination. The first term is the coefficient,
and the remaining (d+1) numbers are the (d+1) vertices of the
d-simplex, where d is the chosen dimension to compute in.

Vertices are given by index numbers, which are to be interpreted in
terms of the index-to-point output. WARNING: index numbers DO NOT
correspond to the order of the points in the input file.

Note that each generator starts with a semicolon (;).

2. Index-to-point (i2p)

This is a list of quintuples: i x y z w
where (x,y,z,w) is an input weighted point, and i is its corresponding
index number.

* License *
OptiPersLP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License 
as published by the Free Software Foundation, 
either version 3 of the License, or
(at your option) any later version.

OptiPersLP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the 
GNU Lesser General Public License along with OptiPersLP.
If not, see <http://www.gnu.org/licenses/>.

* Bundled Software *

OptiPersLP comes with the single-header version of:
  Catch (https://github.com/philsquared/Catch)		 
testing framework, which is under the Boost software license. 

